{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/extend/post-objects","result":{"data":{"mdx":{"id":"3a071d53-880c-55e0-8d9d-1b61ff5e559b","excerpt":"Since WordPress started as a blogging platform post objects are an inherent part of the WordPress ecosystem. \nIn wp-lemon we've extended the default post objectâ€¦","fields":{"slug":"/extend/post-objects/"},"frontmatter":{"title":"Post objects","description":"Documentation on how to use posts in wp-lemon","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Post objects\",\n  \"description\": \"Documentation on how to use posts in wp-lemon\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Since WordPress started as a blogging platform post objects are an inherent part of the WordPress ecosystem.\\nIn wp-lemon we've extended the default post object to make it more flexible and easier to use.\\nWe've hidden the default post type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"post\"), \" and added our own custom post types; \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"news\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"team\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jobs\"), \".\\nBesides that, you can easily create your own custom post types. In this chapter we'll first explain how to create a custom post type\\nand then how to use it in your site.\"), mdx(\"h2\", {\n    \"id\": \"creating-a-custom-post-type\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#creating-a-custom-post-type\",\n    \"aria-label\": \"creating a custom post type permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Creating a custom post type\"), mdx(\"p\", null, \"To create your own custom post type you'll need to create a new file in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/library/models/post-types/\"), \" directory.\\nIn this file you'll find a example file that looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"\\n<?php\\n\\n/**\\n * Custom post type file\\n *\\n * @package WordPress\\n * @subpackage WP_Lemon\\\\Child\\n */\\n\\nnamespace WP_Lemon\\\\Child\\\\Models;\\n\\n/**\\n * Example post type\\n *\\n * @return void\\n */\\nfunction cpt_example()\\n{\\n    $single_name = _x('Example', 'Post Type General Name', 'wp-lemon-child');\\n    $plural_name = _x('Examples', 'Post Type Singular Name', 'wp-lemon-child');\\n\\n    $labels = [\\n        'name'                  => $plural_name,\\n        'singular_name'         => $single_name,\\n        'all_items'             => sprintf(__('All %s', 'wp-lemon'), strtolower($plural_name)),\\n        'add_new_item'          => sprintf(__('Add new %s', 'wp-lemon'), strtolower($single_name)),\\n        'add_new'               => sprintf(__('Add new %s', 'wp-lemon'), strtolower($single_name)),\\n        'new_item'              => sprintf(__('New %s', 'wp-lemon'), strtolower($single_name)),\\n        'edit_item'             => sprintf(__('Edit %s', 'wp-lemon'), strtolower($single_name)),\\n        'update_item'           => sprintf(__('Update %s', 'wp-lemon'), strtolower($single_name)),\\n        'view_item'             => sprintf(__('View %s', 'wp-lemon'), strtolower($single_name)),\\n    ];\\n\\n    $args = [\\n        'labels'                 => $labels,\\n        'supports'               => ['title', 'editor', 'thumbnail'],\\n        'taxonomies'             => ['category'],\\n        'hierarchical'           => false,\\n        'public'                 => true,\\n        'show_ui'                => true,\\n        'show_in_menu'           => true,\\n        'menu_position'          => 5,\\n        'rewrite'                => ['slug' => 'example'],\\n        'menu_icon'              => 'dashicons-businessman',\\n        'show_in_admin_bar'      => true,\\n        'show_in_nav_menus'      => true,\\n        'show_in_rest'           => true,\\n        'can_export'             => true,\\n        'has_archive'            => false,\\n        'exclude_from_search'    => false,\\n        'publicly_queryable'     => true,\\n        'capability_type'        => 'page',\\n        'maybe_has_archive_page' => true,\\n        'enable_overview_block'  => true,\\n        'enable_latest_block'    => true,\\n    ];\\n    register_post_type('example', $args); // unique singular post type name.\\n}\\nadd_action('init', __NAMESPACE__ . '\\\\\\\\cpt_example', 0);\\n\\n\\n\")), mdx(\"p\", null, \"You can copy this file and rename it to your own custom post type. Make sure to change the single and plural name variables.\\nAfter you've created your custom post type you can go to the WordPress backend and create a new post of your custom post type.\\nDon't forget to save your permalinks after you've created your custom post type.\"), mdx(\"h3\", {\n    \"id\": \"archive-page\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#archive-page\",\n    \"aria-label\": \"archive page permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Archive page\"), mdx(\"p\", null, \"Now you can create a custom archive page for your custom post type.\\nOn this archive page you can display all the posts of your custom post type using the overview block.\\nOnce you've created your archive page you can use the WordPress customizer to link your archive page to your custom post type.\\nIf for whatever reason you don't want your post type to have a archive-page you can change the following arguments in your custom post type file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"\\n    $args = [\\n        'maybe_has_archive_page' => true, // change to false if you don't want an archive page\\n        'enable_overview_block'  => true, // change to false if you don't want an overview block\\n        'enable_latest_block'    => true, // change to false if you don't want a latest block\\n    ];\\n\\n\")), mdx(\"h3\", {\n    \"id\": \"single-page\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#single-page\",\n    \"aria-label\": \"single page permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"single page\"), mdx(\"p\", null, \"Your custom post type will also have a single page by default. This single page is default in wp-lemon.\\nBut if you want to overwrite and customize the single page that's possible as well.\\nYou can do this by navigating to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resources/views/templates\"), \", here you can create a new file: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"single-post_type_name.twig\"), \".\"), mdx(\"p\", null, \"If for whatever reason you don't want your post type to have a single-page you can change the following argument in your custom post type file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"\\n    $args = [\\n        'publicly_queryable'     => true, // change to false if you don't want a single page\\n    ];\\n\\n\")), mdx(\"h2\", {\n    \"id\": \"extending-the-post-object\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#extending-the-post-object\",\n    \"aria-label\": \"extending the post object permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Extending the post object\"), mdx(\"p\", null, \"In wp-lemon it's possible to extend the post objects to add functionality if needed.\\nThis should be done by navigating to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/library/controllers/\"), \" directory.\\nHere you can create a new file that extends the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Post\"), \" class. This will look something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"\\n<?php\\n\\n/**\\n * Setup an extended post query class.\\n * Used for post_type_name\\n *\\n * @package WordPress\\n * @subpackage WP_Lemon\\\\Child\\n */\\n\\nnamespace WP_Lemon\\\\Child\\\\Classes;\\n\\nuse Timber\\\\Post;\\nuse Timber\\\\Timber;\\n\\nclass post_type_name extends Post\\n{\\n   private mixed $_example = null;\\n\\n   public function get_example(): array|null\\n   {\\n      if (!is_null($this->_example)) {\\n         return $this->_example;\\n      }\\n\\n      return $this->_example;\\n   }\\n}\\n\\n\")), mdx(\"p\", null, \"After you've created this file you'll need to add it to the classmap, this needs to be done so that Timber knows where to find the new class.\\nYou should do this inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/library\"), \" directory.\\nIn essence you could place it anywhere like in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hooks.php\"), \" file but we prever to place it in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"child-setup.php\"), \" file since it's part of the setup process.\\nThis will look something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"\\nadd_filter(\\n    'timber/post/classmap',\\n    function ($classmap) {\\n        $custom_classmap = [\\n            'person'         => Person::class,\\n            'publication'    => Publication::class,\\n            'project'        => Project::class,\\n            'lectorate'      => Lectorate::class,\\n            'news'           => News::class,\\n            'post-education' => PostEduction::class,\\n            'education'      => Education::class,\\n        ];\\n\\n        return array_merge($classmap, $custom_classmap);\\n    }\\n);\\n\\n\")), mdx(\"p\", null, \"Below you can see a couple simple examples that you could use in your extended post object,\\nand also how you can then use it in your front-end. \"), mdx(\"h3\", {\n    \"id\": \"example-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#example-1\",\n    \"aria-label\": \"example 1 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Example 1\"), mdx(\"p\", null, \"Below you'll find a simple example of a function that calculates the reading time of a post.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"\\n/**\\n * Calculate the reading time of the post.\\n *\\n * @return string\\n */\\npublic function reading_time(): string\\n{\\n    $words_per_minute = 228;\\n\\n    $words = str_word_count(wp_strip_all_tags($this->content()));\\n\\n    if ($words / $words_per_minute < 1) {\\n        return __('< 1 minute', 'wp-lemon-child');\\n    }\\n\\n    $minutes = round($words / $words_per_minute);\\n\\n    /* translators: %s: Time duration in minute or minutes. */\\n    return sprintf(_n('%s minute', '%s minutes', $minutes, 'wp-lemon-child'), (int) $minutes);\\n}\\n\\n\")), mdx(\"p\", null, \"This newly created function can be used in your single page for example like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"\\n{% block content %}\\n    <header class=\\\"section\\\">\\n        <div class=\\\"entry__header-top\\\">\\n            <div class=\\\"readingtime\\\">\\n                <i class=\\\"icon-clock-o\\\"></i>\\n                {{ post.reading_time }}\\n            </div>\\n        </div>\\n        <h1>{{ post.title }}</h1>\\n    </header>\\n    {{ post.content }}\\n{% endblock %}\\n\\n\")), mdx(\"h3\", {\n    \"id\": \"example-2\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#example-2\",\n    \"aria-label\": \"example 2 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Example 2\"), mdx(\"p\", null, \"In this example the name of a person needed to be formatted in a certain way, ofc we could've also done it in the front-end\\nbut we believe that it's best to let the back-end handle most of the logic.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"\\n    /**\\n     * Fetch the full name of the person, including title.\\n     *\\n     * @return string\\n     */\\n    public function get_full_name(): string\\n    {\\n        if (!is_null($this->_full_name)) {\\n            return $this->_full_name;\\n        }\\n        $name = null;\\n\\n        $names_group = $this->meta('names');\\n\\n        $name .= $names_group['title'] ? $names_group['title'] . ' ' : '';\\n        $name .= $names_group['first_name'] ? $names_group['first_name'] . ' ' : '';\\n        $name .= $names_group['last_name'] ? $names_group['last_name'] : '';\\n\\n        $this->_full_name = $name;\\n\\n        return $this->_full_name;\\n    }\\n\\n\")), mdx(\"p\", null, \"This again could then easily be used in the single person page like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"\\n{% block content %}\\n    <header class=\\\"section\\\">\\n        <h1>{{ person.get_full_name }}</h1>\\n    </header>\\n    {{ person.content }}\\n{% endblock %}\\n\\n\")), mdx(\"h2\", {\n    \"id\": \"wp-lemon-queries\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#wp-lemon-queries\",\n    \"aria-label\": \"wp lemon queries permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Wp-lemon queries\"), mdx(\"p\", null, \"In wp-lemon we've added a set of predefined queries that you can use to fetch posts. You could use these for example in your block context.\\nFor more documentation on how to use them within your block context take a look at the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/wp-lemon-docs/blocks/block-controller\"\n  }, \"block context documentation\"), \".\\nBelow you can find a list of all the queries that are available in wp-lemon.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"latest_items_query\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Retrieves the latest posts of a specific type, optionally filtered by taxonomy and terms.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"other_items_query\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Fetches posts of a specific type, excluding a given post, optionally filtered by taxonomy and terms.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"specific_items_query\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Retrieves specific posts by their IDs and type.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"archive_query\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Fetches a set of posts of a specific type for archive display, supporting pagination.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"get_total_posts\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Calculates the total number of posts available for an AJAX \\\"load more\\\" functionality.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"adjacent_post_info\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Gets information about the next or previous post, or returns the first/last post if unavailable.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"next_post_info\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Returns information about the next post or the first post if no next post exists.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"previous_post_info\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Returns information about the previous post or the last post if no previous post exists.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"taxonomy_post_collection\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Retrieves a collection of posts organized by category, based on a taxonomy and post type.\")))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Creating a custom post type"},{"depth":3,"value":"Archive page"},{"depth":3,"value":"single page"},{"depth":2,"value":"Extending the post object"},{"depth":3,"value":"Example 1"},{"depth":3,"value":"Example 2"},{"depth":2,"value":"Wp-lemon queries"}]}},"pageContext":{"slug":"/extend/post-objects/","prev":{"label":"Customizer fields","link":"/extend/customizer-fields"},"next":{"label":"Overwrite twig files","link":"/overwrite/twig-files"},"repositoryEditUrl":"https://github.com/Studio-Lemon/wp-lemon-docs/tree/master/src/docs/extend/post-objects.mdx","repositoryProvider":"GitHub"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}