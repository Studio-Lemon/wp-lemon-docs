{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/extend/add-fields","result":{"data":{"mdx":{"id":"cfe1ba75-1edd-5750-ae09-209164068300","excerpt":"Although it's possible to add ACF fields using the build in UI method, we highly recommend adding the fields using PHP configurations. We find this method moreâ€¦","fields":{"slug":"/extend/add-fields/"},"frontmatter":{"title":"Add ACF fields.","description":"This page will describe the recommended process of adding additional field groups using ACF builder.","image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Add ACF fields.\",\n  \"description\": \"This page will describe the recommended process of adding additional field groups using ACF builder.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Although it's possible to add ACF fields using the build in UI method, we highly recommend adding the fields using PHP configurations. We find this method more robust, especially in larger websites.\"), mdx(\"p\", null, \"You can start adding the first field group by creating a file in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"library/models\"), \" folder of your child theme.\\nFor example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fields-news.php\"), \". Inside this folder.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"<?php\\n\\n/**\\n * Adds extra fields to news.\\n *\\n * @package WordPress\\n * @subpackage WP_Lemon\\n */\\n\\nnamespace WP_Lemon\\\\Child\\\\Models;\\n\\nuse StoutLogic\\\\AcfBuilder\\\\FieldsBuilder;\\n\\n$news = new FieldsBuilder(\\n   'news',\\n   [\\n      'title' => __('Additonal news fields', 'wp-lemon-child'),\\n      'style' => 'seamless',\\n   ]\\n);\\n\\n$news\\n   ->addText('label', [\\n      'label'    => __('Label', 'wp-lemon-child'),\\n      'required' => 1,\\n   ])\\n   ->setLocation('post_type', '==', 'news');\\n\\nadd_action('acf/init', function () use ($news) {\\n   acf_add_local_field_group($news->build());\\n});\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/extend/add-fields/","prev":{"label":"Posttypes & taxonomies","link":"/extend/add-models"},"next":{"label":"Filters & Actions","link":"/extend/hooks"},"repositoryEditUrl":"https://github.com/Studio-Lemon/wp-lemon-docs/tree/master/src/docs/extend/add-fields.mdx","repositoryProvider":"GitHub"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}